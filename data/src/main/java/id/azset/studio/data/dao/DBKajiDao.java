package id.azset.studio.data.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBKAJI".
*/
public class DBKajiDao extends AbstractDao<DBKaji, Long> {

    public static final String TABLENAME = "DBKAJI";

    /**
     * Properties of entity DBKaji.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "Title", false, "TITLE");
        public final static Property Pemateri = new Property(2, String.class, "Pemateri", false, "PEMATERI");
        public final static Property Duration = new Property(3, String.class, "Duration", false, "DURATION");
        public final static Property Size = new Property(4, String.class, "Size", false, "SIZE");
        public final static Property Description = new Property(5, String.class, "Description", false, "DESCRIPTION");
        public final static Property Url1 = new Property(6, String.class, "Url1", false, "URL1");
        public final static Property Url2 = new Property(7, String.class, "Url2", false, "URL2");
        public final static Property FileName = new Property(8, String.class, "FileName", false, "FILE_NAME");
        public final static Property TypeFile = new Property(9, String.class, "TypeFile", false, "TYPE_FILE");
        public final static Property Preview = new Property(10, String.class, "Preview", false, "PREVIEW");
        public final static Property Quality = new Property(11, Integer.class, "Quality", false, "QUALITY");
        public final static Property Location = new Property(12, String.class, "Location", false, "LOCATION");
        public final static Property Date = new Property(13, java.util.Date.class, "Date", false, "DATE");
        public final static Property CreatedDate = new Property(14, java.util.Date.class, "CreatedDate", false, "CREATED_DATE");
        public final static Property UstadzId = new Property(15, Long.class, "UstadzId", false, "USTADZ_ID");
        public final static Property CategoryId = new Property(16, Long.class, "CategoryId", false, "CATEGORY_ID");
    }

    private DaoSession daoSession;


    public DBKajiDao(DaoConfig config) {
        super(config);
    }
    
    public DBKajiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBKAJI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: Title
                "\"PEMATERI\" TEXT NOT NULL ," + // 2: Pemateri
                "\"DURATION\" TEXT NOT NULL ," + // 3: Duration
                "\"SIZE\" TEXT NOT NULL ," + // 4: Size
                "\"DESCRIPTION\" TEXT," + // 5: Description
                "\"URL1\" TEXT NOT NULL ," + // 6: Url1
                "\"URL2\" TEXT," + // 7: Url2
                "\"FILE_NAME\" TEXT," + // 8: FileName
                "\"TYPE_FILE\" TEXT," + // 9: TypeFile
                "\"PREVIEW\" TEXT," + // 10: Preview
                "\"QUALITY\" INTEGER," + // 11: Quality
                "\"LOCATION\" TEXT," + // 12: Location
                "\"DATE\" INTEGER," + // 13: Date
                "\"CREATED_DATE\" INTEGER NOT NULL ," + // 14: CreatedDate
                "\"USTADZ_ID\" INTEGER," + // 15: UstadzId
                "\"CATEGORY_ID\" INTEGER);"); // 16: CategoryId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBKAJI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBKaji entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getPemateri());
        stmt.bindString(4, entity.getDuration());
        stmt.bindString(5, entity.getSize());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
        stmt.bindString(7, entity.getUrl1());
 
        String Url2 = entity.getUrl2();
        if (Url2 != null) {
            stmt.bindString(8, Url2);
        }
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(9, FileName);
        }
 
        String TypeFile = entity.getTypeFile();
        if (TypeFile != null) {
            stmt.bindString(10, TypeFile);
        }
 
        String Preview = entity.getPreview();
        if (Preview != null) {
            stmt.bindString(11, Preview);
        }
 
        Integer Quality = entity.getQuality();
        if (Quality != null) {
            stmt.bindLong(12, Quality);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(13, Location);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(14, Date.getTime());
        }
        stmt.bindLong(15, entity.getCreatedDate().getTime());
 
        Long UstadzId = entity.getUstadzId();
        if (UstadzId != null) {
            stmt.bindLong(16, UstadzId);
        }
 
        Long CategoryId = entity.getCategoryId();
        if (CategoryId != null) {
            stmt.bindLong(17, CategoryId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBKaji entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getPemateri());
        stmt.bindString(4, entity.getDuration());
        stmt.bindString(5, entity.getSize());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(6, Description);
        }
        stmt.bindString(7, entity.getUrl1());
 
        String Url2 = entity.getUrl2();
        if (Url2 != null) {
            stmt.bindString(8, Url2);
        }
 
        String FileName = entity.getFileName();
        if (FileName != null) {
            stmt.bindString(9, FileName);
        }
 
        String TypeFile = entity.getTypeFile();
        if (TypeFile != null) {
            stmt.bindString(10, TypeFile);
        }
 
        String Preview = entity.getPreview();
        if (Preview != null) {
            stmt.bindString(11, Preview);
        }
 
        Integer Quality = entity.getQuality();
        if (Quality != null) {
            stmt.bindLong(12, Quality);
        }
 
        String Location = entity.getLocation();
        if (Location != null) {
            stmt.bindString(13, Location);
        }
 
        java.util.Date Date = entity.getDate();
        if (Date != null) {
            stmt.bindLong(14, Date.getTime());
        }
        stmt.bindLong(15, entity.getCreatedDate().getTime());
 
        Long UstadzId = entity.getUstadzId();
        if (UstadzId != null) {
            stmt.bindLong(16, UstadzId);
        }
 
        Long CategoryId = entity.getCategoryId();
        if (CategoryId != null) {
            stmt.bindLong(17, CategoryId);
        }
    }

    @Override
    protected final void attachEntity(DBKaji entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBKaji readEntity(Cursor cursor, int offset) {
        DBKaji entity = new DBKaji( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // Title
            cursor.getString(offset + 2), // Pemateri
            cursor.getString(offset + 3), // Duration
            cursor.getString(offset + 4), // Size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Description
            cursor.getString(offset + 6), // Url1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // Url2
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // FileName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // TypeFile
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // Preview
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // Quality
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // Location
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // Date
            new java.util.Date(cursor.getLong(offset + 14)), // CreatedDate
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // UstadzId
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // CategoryId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBKaji entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setPemateri(cursor.getString(offset + 2));
        entity.setDuration(cursor.getString(offset + 3));
        entity.setSize(cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrl1(cursor.getString(offset + 6));
        entity.setUrl2(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTypeFile(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPreview(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setQuality(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setLocation(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setCreatedDate(new java.util.Date(cursor.getLong(offset + 14)));
        entity.setUstadzId(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setCategoryId(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBKaji entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBKaji entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBKaji entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDBUstadzDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDBCategoryDao().getAllColumns());
            builder.append(" FROM DBKAJI T");
            builder.append(" LEFT JOIN DBUSTADZ T0 ON T.\"USTADZ_ID\"=T0.\"USTADZ_ID\"");
            builder.append(" LEFT JOIN DBCATEGORY T1 ON T.\"CATEGORY_ID\"=T1.\"CATEGORY_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DBKaji loadCurrentDeep(Cursor cursor, boolean lock) {
        DBKaji entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DBUstadz dBUstadz = loadCurrentOther(daoSession.getDBUstadzDao(), cursor, offset);
        entity.setDBUstadz(dBUstadz);
        offset += daoSession.getDBUstadzDao().getAllColumns().length;

        DBCategory dBCategory = loadCurrentOther(daoSession.getDBCategoryDao(), cursor, offset);
        entity.setDBCategory(dBCategory);

        return entity;    
    }

    public DBKaji loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DBKaji> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DBKaji> list = new ArrayList<DBKaji>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DBKaji> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DBKaji> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
