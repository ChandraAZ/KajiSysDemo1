package id.azset.studio.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBMANAGE_KAJI".
*/
public class DBManageKajiDao extends AbstractDao<DBManageKaji, Long> {

    public static final String TABLENAME = "DBMANAGE_KAJI";

    /**
     * Properties of entity DBManageKaji.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsFavorite = new Property(1, boolean.class, "IsFavorite", false, "IS_FAVORITE");
        public final static Property IsDownload = new Property(2, boolean.class, "IsDownload", false, "IS_DOWNLOAD");
        public final static Property IsNew = new Property(3, boolean.class, "IsNew", false, "IS_NEW");
        public final static Property LocalPath1 = new Property(4, String.class, "LocalPath1", false, "LOCAL_PATH1");
        public final static Property LocalPath2 = new Property(5, String.class, "LocalPath2", false, "LOCAL_PATH2");
        public final static Property Rating = new Property(6, Integer.class, "Rating", false, "RATING");
        public final static Property IsDeleted = new Property(7, boolean.class, "IsDeleted", false, "IS_DELETED");
    }


    public DBManageKajiDao(DaoConfig config) {
        super(config);
    }
    
    public DBManageKajiDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBMANAGE_KAJI\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_FAVORITE\" INTEGER NOT NULL ," + // 1: IsFavorite
                "\"IS_DOWNLOAD\" INTEGER NOT NULL ," + // 2: IsDownload
                "\"IS_NEW\" INTEGER NOT NULL ," + // 3: IsNew
                "\"LOCAL_PATH1\" TEXT," + // 4: LocalPath1
                "\"LOCAL_PATH2\" TEXT," + // 5: LocalPath2
                "\"RATING\" INTEGER," + // 6: Rating
                "\"IS_DELETED\" INTEGER NOT NULL );"); // 7: IsDeleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBMANAGE_KAJI\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBManageKaji entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsFavorite() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsDownload() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsNew() ? 1L: 0L);
 
        String LocalPath1 = entity.getLocalPath1();
        if (LocalPath1 != null) {
            stmt.bindString(5, LocalPath1);
        }
 
        String LocalPath2 = entity.getLocalPath2();
        if (LocalPath2 != null) {
            stmt.bindString(6, LocalPath2);
        }
 
        Integer Rating = entity.getRating();
        if (Rating != null) {
            stmt.bindLong(7, Rating);
        }
        stmt.bindLong(8, entity.getIsDeleted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBManageKaji entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsFavorite() ? 1L: 0L);
        stmt.bindLong(3, entity.getIsDownload() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsNew() ? 1L: 0L);
 
        String LocalPath1 = entity.getLocalPath1();
        if (LocalPath1 != null) {
            stmt.bindString(5, LocalPath1);
        }
 
        String LocalPath2 = entity.getLocalPath2();
        if (LocalPath2 != null) {
            stmt.bindString(6, LocalPath2);
        }
 
        Integer Rating = entity.getRating();
        if (Rating != null) {
            stmt.bindLong(7, Rating);
        }
        stmt.bindLong(8, entity.getIsDeleted() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBManageKaji readEntity(Cursor cursor, int offset) {
        DBManageKaji entity = new DBManageKaji( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // IsFavorite
            cursor.getShort(offset + 2) != 0, // IsDownload
            cursor.getShort(offset + 3) != 0, // IsNew
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // LocalPath1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // LocalPath2
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // Rating
            cursor.getShort(offset + 7) != 0 // IsDeleted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBManageKaji entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsFavorite(cursor.getShort(offset + 1) != 0);
        entity.setIsDownload(cursor.getShort(offset + 2) != 0);
        entity.setIsNew(cursor.getShort(offset + 3) != 0);
        entity.setLocalPath1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocalPath2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRating(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsDeleted(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBManageKaji entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBManageKaji entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBManageKaji entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
