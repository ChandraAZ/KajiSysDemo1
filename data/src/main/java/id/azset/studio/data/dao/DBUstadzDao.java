package id.azset.studio.data.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBUSTADZ".
*/
public class DBUstadzDao extends AbstractDao<DBUstadz, Long> {

    public static final String TABLENAME = "DBUSTADZ";

    /**
     * Properties of entity DBUstadz.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UstadzId = new Property(0, Long.class, "UstadzId", true, "USTADZ_ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Study = new Property(2, String.class, "Study", false, "STUDY");
        public final static Property Description = new Property(3, String.class, "Description", false, "DESCRIPTION");
    }


    public DBUstadzDao(DaoConfig config) {
        super(config);
    }
    
    public DBUstadzDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBUSTADZ\" (" + //
                "\"USTADZ_ID\" INTEGER PRIMARY KEY ," + // 0: UstadzId
                "\"NAME\" TEXT NOT NULL ," + // 1: Name
                "\"STUDY\" TEXT," + // 2: Study
                "\"DESCRIPTION\" TEXT);"); // 3: Description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBUSTADZ\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBUstadz entity) {
        stmt.clearBindings();
 
        Long UstadzId = entity.getUstadzId();
        if (UstadzId != null) {
            stmt.bindLong(1, UstadzId);
        }
        stmt.bindString(2, entity.getName());
 
        String Study = entity.getStudy();
        if (Study != null) {
            stmt.bindString(3, Study);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBUstadz entity) {
        stmt.clearBindings();
 
        Long UstadzId = entity.getUstadzId();
        if (UstadzId != null) {
            stmt.bindLong(1, UstadzId);
        }
        stmt.bindString(2, entity.getName());
 
        String Study = entity.getStudy();
        if (Study != null) {
            stmt.bindString(3, Study);
        }
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(4, Description);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBUstadz readEntity(Cursor cursor, int offset) {
        DBUstadz entity = new DBUstadz( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // UstadzId
            cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Study
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // Description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBUstadz entity, int offset) {
        entity.setUstadzId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setStudy(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBUstadz entity, long rowId) {
        entity.setUstadzId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBUstadz entity) {
        if(entity != null) {
            return entity.getUstadzId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBUstadz entity) {
        return entity.getUstadzId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
